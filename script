-- RBX Wix UI - Interfaz Mejorada con Funciones Avanzadas
local Players = game:GetService("Players")
local Lighting = game:GetService("Lighting")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")

local player = Players.LocalPlayer

-- Esperar a que el PlayerGui exista
if not player:FindFirstChild("PlayerGui") then
    player:WaitForChild("PlayerGui")
end

-- Variables globales
local RBXWix = {
    Enabled = false,
    ToggleKey = Enum.KeyCode.H,
    FullbrightEnabled = false,
    JumpPowerEnabled = false,
    ESPEnabled = false,
    WalkSpeedEnabled = false,
    WalkSpeedValue = 25,
    JumpPowerValue = 50,
    NoclipEnabled = false,
    FogEnabled = false,
    ESPObjects = {},
    ESPHealth = true,
    ESPDistance = true,
    NoclipConnections = {}
}

-- Colores modernos con tema azul oscuro
local colors = {
    primary = Color3.fromRGB(0, 120, 215),
    secondary = Color3.fromRGB(40, 40, 40),
    background = Color3.fromRGB(20, 20, 25),
    text = Color3.fromRGB(240, 240, 240),
    accent = Color3.fromRGB(0, 180, 255),
    toggleOn = Color3.fromRGB(0, 200, 83),
    toggleOff = Color3.fromRGB(80, 80, 80),
    card = Color3.fromRGB(30, 30, 35),
    header = Color3.fromRGB(25, 25, 30),
    success = Color3.fromRGB(76, 175, 80),
    warning = Color3.fromRGB(255, 193, 7),
    danger = Color3.fromRGB(244, 67, 54)
}

-- Crear la interfaz principal
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "RBXWixUI"
screenGui.Parent = player.PlayerGui
screenGui.ResetOnSpawn = false
screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

-- Crear la interfaz de fondo (para capturar el cursor)
local backgroundFrame = Instance.new("Frame")
backgroundFrame.Name = "BackgroundFrame"
backgroundFrame.Size = UDim2.new(1, 0, 1, 0)
backgroundFrame.Position = UDim2.new(0, 0, 0, 0)
backgroundFrame.BackgroundTransparency = 1
backgroundFrame.Visible = false
backgroundFrame.Active = true
backgroundFrame.Parent = screenGui

-- Crear la ventana principal con bordes redondeados
local mainFrame = Instance.new("Frame")
mainFrame.Name = "MainFrame"
mainFrame.Size = UDim2.new(0, 500, 0, 500)
mainFrame.Position = UDim2.new(0.5, -250, 0.5, -250)
mainFrame.BackgroundColor3 = colors.background
mainFrame.BorderSizePixel = 0
mainFrame.ClipsDescendants = true
mainFrame.Visible = false
mainFrame.Parent = screenGui

-- Añadir bordes redondeados
local corner = Instance.new("UICorner")
corner.CornerRadius = UDim.new(0, 15)
corner.Parent = mainFrame

-- Sombra de la ventana mejorada
local shadow = Instance.new("ImageLabel")
shadow.Name = "Shadow"
shadow.Size = UDim2.new(1, 25, 1, 25)
shadow.Position = UDim2.new(0, -12, 0, -12)
shadow.BackgroundTransparency = 1
shadow.Image = "rbxassetid://5554236805"
shadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
shadow.ImageTransparency = 0.8
shadow.ScaleType = Enum.ScaleType.Slice
shadow.SliceCenter = Rect.new(10, 10, 118, 118)
shadow.ZIndex = -1
shadow.Parent = mainFrame

-- Barra de título con efecto de acrílico
local titleBar = Instance.new("Frame")
titleBar.Name = "TitleBar"
titleBar.Size = UDim2.new(1, 0, 0, 40)
titleBar.Position = UDim2.new(0, 0, 0, 0)
titleBar.BackgroundColor3 = colors.header
titleBar.BorderSizePixel = 0
titleBar.Parent = mainFrame

local titleCorner = Instance.new("UICorner")
titleCorner.CornerRadius = UDim.new(0, 15)
titleCorner.Parent = titleBar

local titleText = Instance.new("TextLabel")
titleText.Name = "TitleText"
titleText.Size = UDim2.new(1, -90, 1, 0)
titleText.Position = UDim2.new(0, 15, 0, 0)
titleText.BackgroundTransparency = 1
titleText.Text = "RBX Wix Premium"
titleText.TextColor3 = colors.text
titleText.TextXAlignment = Enum.TextXAlignment.Left
titleText.Font = Enum.Font.GothamBold
titleText.TextSize = 18
titleText.Parent = titleBar

local closeButton = Instance.new("TextButton")
closeButton.Name = "CloseButton"
closeButton.Size = UDim2.new(0, 40, 0, 40)
closeButton.Position = UDim2.new(1, -40, 0, 0)
closeButton.BackgroundColor3 = colors.danger
closeButton.BorderSizePixel = 0
closeButton.Text = "X"
closeButton.TextColor3 = colors.text
closeButton.Font = Enum.Font.GothamBold
closeButton.TextSize = 18
closeButton.Parent = titleBar

-- Hacer el botón circular
local closeCorner = Instance.new("UICorner")
closeCorner.CornerRadius = UDim.new(1, 0)
closeCorner.Parent = closeButton

-- Marco dividido
local contentFrame = Instance.new("Frame")
contentFrame.Name = "ContentFrame"
contentFrame.Size = UDim2.new(1, 0, 1, -40)
contentFrame.Position = UDim2.new(0, 0, 0, 40)
contentFrame.BackgroundTransparency = 1
contentFrame.Parent = mainFrame

-- Panel lateral (secciones) con efecto de acrílico
local sidePanel = Instance.new("ScrollingFrame")
sidePanel.Name = "SidePanel"
sidePanel.Size = UDim2.new(0, 160, 1, 0)
sidePanel.Position = UDim2.new(0, 0, 0, 0)
sidePanel.BackgroundColor3 = colors.secondary
sidePanel.BackgroundTransparency = 0.1
sidePanel.BorderSizePixel = 0
sidePanel.ScrollBarThickness = 4
sidePanel.ScrollBarImageColor3 = colors.accent
sidePanel.CanvasSize = UDim2.new(0, 0, 0, 0)
sidePanel.Parent = contentFrame

local sideCorner = Instance.new("UICorner")
sideCorner.CornerRadius = UDim.new(0, 15)
sideCorner.Parent = sidePanel

local uiListLayout = Instance.new("UIListLayout")
uiListLayout.Parent = sidePanel
uiListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
uiListLayout.SortOrder = Enum.SortOrder.LayoutOrder
uiListLayout.Padding = UDim.new(0, 10)

-- Panel de contenido
local contentPanel = Instance.new("ScrollingFrame")
contentPanel.Name = "ContentPanel"
contentPanel.Size = UDim2.new(1, -165, 1, 0)
contentPanel.Position = UDim2.new(0, 165, 0, 0)
contentPanel.BackgroundTransparency = 1
contentPanel.ScrollBarThickness = 4
contentPanel.ScrollBarImageColor3 = colors.accent
contentPanel.CanvasSize = UDim2.new(0, 0, 0, 0)
contentPanel.Parent = contentFrame

local contentLayout = Instance.new("UIListLayout")
contentLayout.Parent = contentPanel
contentLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
contentLayout.SortOrder = Enum.SortOrder.LayoutOrder
contentLayout.Padding = UDim.new(0, 15)

-- Crear secciones
local sections = {
    {Name = "General", Desc = "Configuración general del menu", Icon = "⚙️"},
    {Name = "World", Desc = "Ajustes del entorno y mundo", Icon = "🌎"},
    {Name = "Main", Desc = "Funciones principales del script", Icon = "🚀"},
    {Name = "Players", Desc = "Opciones relacionadas con jugadores", Icon = "👥"},
    {Name = "Misc", Desc = "Otras funciones diversas", Icon = "🔧"}
}

local sectionFrames = {}

for i, sectionData in ipairs(sections) do
    -- Botón de sección con icono
    local sectionButton = Instance.new("TextButton")
    sectionButton.Name = sectionData.Name .. "Button"
    sectionButton.Size = UDim2.new(0.9, 0, 0, 50)
    sectionButton.BackgroundColor3 = colors.card
    sectionButton.BorderSizePixel = 0
    sectionButton.Text = " " .. sectionData.Icon .. "  " .. sectionData.Name
    sectionButton.TextColor3 = colors.text
    sectionButton.Font = Enum.Font.Gotham
    sectionButton.TextSize = 14
    sectionButton.TextXAlignment = Enum.TextXAlignment.Left
    sectionButton.LayoutOrder = i
    sectionButton.Parent = sidePanel
    
    -- Hacer botones redondeados
    local buttonCorner = Instance.new("UICorner")
    buttonCorner.CornerRadius = UDim.new(0, 10)
    buttonCorner.Parent = sectionButton
    
    -- Efecto hover en botones
    sectionButton.MouseEnter:Connect(function()
        TweenService:Create(sectionButton, TweenInfo.new(0.2), {BackgroundColor3 = colors.accent}):Play()
    end)
    
    sectionButton.MouseLeave:Connect(function()
        TweenService:Create(sectionButton, TweenInfo.new(0.2), {BackgroundColor3 = colors.card}):Play()
    end)
    
    -- Frame de contenido de sección
    local sectionFrame = Instance.new("Frame")
    sectionFrame.Name = sectionData.Name .. "Frame"
    sectionFrame.Size = UDim2.new(1, -20, 0, 0)
    sectionFrame.BackgroundTransparency = 1
    sectionFrame.Visible = false
    sectionFrame.LayoutOrder = i
    sectionFrame.Parent = contentPanel
    
    local sectionUIList = Instance.new("UIListLayout")
    sectionUIList.Parent = sectionFrame
    sectionUIList.SortOrder = Enum.SortOrder.LayoutOrder
    sectionUIList.Padding = UDim.new(0, 15)
    
    -- Título de sección con icono
    local sectionTitle = Instance.new("TextLabel")
    sectionTitle.Name = "Title"
    sectionTitle.Size = UDim2.new(1, 0, 0, 40)
    sectionTitle.BackgroundTransparency = 1
    sectionTitle.Text = sectionData.Icon .. "  " .. sectionData.Name
    sectionTitle.TextColor3 = colors.text
    sectionTitle.Font = Enum.Font.GothamBold
    sectionTitle.TextSize = 22
    sectionTitle.TextXAlignment = Enum.TextXAlignment.Left
    sectionTitle.Parent = sectionFrame
    
    -- Descripción de sección
    local sectionDesc = Instance.new("TextLabel")
    sectionDesc.Name = "Description"
    sectionDesc.Size = UDim2.new(1, 0, 0, 25)
    sectionDesc.BackgroundTransparency = 1
    sectionDesc.Text = sectionData.Desc
    sectionDesc.TextColor3 = Color3.fromRGB(180, 180, 180)
    sectionDesc.Font = Enum.Font.Gotham
    sectionDesc.TextSize = 14
    sectionDesc.TextXAlignment = Enum.TextXAlignment.Left
    sectionDesc.Parent = sectionFrame
    
    sectionFrames[sectionData.Name] = sectionFrame
    
    -- Conectar evento de clic al botón
    sectionButton.MouseButton1Click:Connect(function()
        for name, frame in pairs(sectionFrames) do
            frame.Visible = (name == sectionData.Name)
        end
    end)
end

-- Ajustar tamaño del canvas del panel lateral
sidePanel.CanvasSize = UDim2.new(0, 0, 0, #sections * 60)

-- Mostrar la sección General por defecto
sectionFrames["General"].Visible = true

-- Función para crear interruptores modernos con forma circular
function createToggle(name, description, parent, callback)
    local toggleFrame = Instance.new("Frame")
    toggleFrame.Name = name .. "Toggle"
    toggleFrame.Size = UDim2.new(1, 0, 0, 80)
    toggleFrame.BackgroundColor3 = colors.card
    toggleFrame.BorderSizePixel = 0
    toggleFrame.LayoutOrder = #parent:GetChildren()
    toggleFrame.Parent = parent
    
    -- Bordes redondeados
    local frameCorner = Instance.new("UICorner")
    frameCorner.CornerRadius = UDim.new(0, 12)
    frameCorner.Parent = toggleFrame
    
    local toggleText = Instance.new("TextLabel")
    toggleText.Name = "Text"
    toggleText.Size = UDim2.new(0.7, -10, 0, 35)
    toggleText.Position = UDim2.new(0, 15, 0, 10)
    toggleText.BackgroundTransparency = 1
    toggleText.Text = name
    toggleText.TextColor3 = colors.text
    toggleText.TextXAlignment = Enum.TextXAlignment.Left
    toggleText.Font = Enum.Font.GothamBold
    toggleText.TextSize = 18
    toggleText.Parent = toggleFrame
    
    local toggleDesc = Instance.new("TextLabel")
    toggleDesc.Name = "Description"
    toggleDesc.Size = UDim2.new(0.7, -10, 0, 30)
    toggleDesc.Position = UDim2.new(0, 15, 0, 45)
    toggleDesc.BackgroundTransparency = 1
    toggleDesc.Text = description
    toggleDesc.TextColor3 = Color3.fromRGB(180, 180, 180)
    toggleDesc.TextXAlignment = Enum.TextXAlignment.Left
    toggleDesc.Font = Enum.Font.Gotham
    toggleDesc.TextSize = 14
    toggleDesc.Parent = toggleFrame
    
    local toggleContainer = Instance.new("Frame")
    toggleContainer.Name = "ToggleContainer"
    toggleContainer.Size = UDim2.new(0, 55, 0, 26)
    toggleContainer.Position = UDim2.new(1, -65, 0.5, -13)
    toggleContainer.BackgroundColor3 = colors.toggleOff
    toggleContainer.BorderSizePixel = 0
    toggleContainer.Parent = toggleFrame
    
    -- Hacer el contenedor circular
    local containerCorner = Instance.new("UICorner")
    containerCorner.CornerRadius = UDim.new(1, 0)
    containerCorner.Parent = toggleContainer
    
    local toggleKnob = Instance.new("Frame")
    toggleKnob.Name = "ToggleKnob"
    toggleKnob.Size = UDim2.new(0, 22, 0, 22)
    toggleKnob.Position = UDim2.new(0, 2, 0, 2)
    toggleKnob.BackgroundColor3 = colors.text
    toggleKnob.BorderSizePixel = 0
    toggleKnob.Parent = toggleContainer
    
    -- Hacer el knob circular
    local knobCorner = Instance.new("UICorner")
    knobCorner.CornerRadius = UDim.new(1, 0)
    knobCorner.Parent = toggleKnob
    
    local status = false
    
    local function updateToggle()
        if status then
            TweenService:Create(toggleContainer, TweenInfo.new(0.2), {BackgroundColor3 = colors.toggleOn}):Play()
            TweenService:Create(toggleKnob, TweenInfo.new(0.2), {Position = UDim2.new(0, 31, 0, 2)}):Play()
        else
            TweenService:Create(toggleContainer, TweenInfo.new(0.2), {BackgroundColor3 = colors.toggleOff}):Play()
            TweenService:Create(toggleKnob, TweenInfo.new(0.2), {Position = UDim2.new(0, 2, 0, 2)}):Play()
        end
        if callback then
            callback(status)
        end
    end
    
    toggleFrame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            status = not status
            updateToggle()
        end
    end)
    
    return {
        Set = function(value)
            status = value
            updateToggle()
        end,
        Get = function()
            return status
        end
    }
end

-- Función para crear slider integrado con descripción
function createSlider(name, description, parent, min, max, default, callback)
    local sliderFrame = Instance.new("Frame")
    sliderFrame.Name = name .. "Slider"
    sliderFrame.Size = UDim2.new(1, 0, 0, 100)
    sliderFrame.BackgroundColor3 = colors.card
    sliderFrame.BorderSizePixel = 0
    sliderFrame.LayoutOrder = #parent:GetChildren()
    sliderFrame.Parent = parent
    
    -- Bordes redondeados
    local frameCorner = Instance.new("UICorner")
    frameCorner.CornerRadius = UDim.new(0, 12)
    frameCorner.Parent = sliderFrame
    
    local sliderText = Instance.new("TextLabel")
    sliderText.Name = "Text"
    sliderText.Size = UDim2.new(0.7, -10, 0, 35)
    sliderText.Position = UDim2.new(0, 15, 0, 10)
    sliderText.BackgroundTransparency = 1
    sliderText.Text = name
    sliderText.TextColor3 = colors.text
    sliderText.TextXAlignment = Enum.TextXAlignment.Left
    sliderText.Font = Enum.Font.GothamBold
    sliderText.TextSize = 18
    sliderText.Parent = sliderFrame
    
    local valueText = Instance.new("TextLabel")
    valueText.Name = "ValueText"
    valueText.Size = UDim2.new(0.3, -10, 0, 35)
    valueText.Position = UDim2.new(0.7, 0, 0, 10)
    valueText.BackgroundTransparency = 1
    valueText.Text = tostring(default)
    valueText.TextColor3 = colors.text
    valueText.TextXAlignment = Enum.TextXAlignment.Right
    valueText.Font = Enum.Font.GothamBold
    valueText.TextSize = 18
    valueText.Parent = sliderFrame
    
    local sliderDesc = Instance.new("TextLabel")
    sliderDesc.Name = "Description"
    sliderDesc.Size = UDim2.new(1, -20, 0, 25)
    sliderDesc.Position = UDim2.new(0, 15, 0, 45)
    sliderDesc.BackgroundTransparency = 1
    sliderDesc.Text = description
    sliderDesc.TextColor3 = Color3.fromRGB(180, 180, 180)
    sliderDesc.TextXAlignment = Enum.TextXAlignment.Left
    sliderDesc.Font = Enum.Font.Gotham
    sliderDesc.TextSize = 14
    sliderDesc.Parent = sliderFrame
    
    local sliderTrack = Instance.new("Frame")
    sliderTrack.Name = "SliderTrack"
    sliderTrack.Size = UDim2.new(1, -30, 0, 8)
    sliderTrack.Position = UDim2.new(0, 15, 1, -30)
    sliderTrack.BackgroundColor3 = colors.toggleOff
    sliderTrack.BorderSizePixel = 0
    sliderTrack.Parent = sliderFrame
    
    -- Hacer la pista redondeada
    local trackCorner = Instance.new("UICorner")
    trackCorner.CornerRadius = UDim.new(1, 0)
    trackCorner.Parent = sliderTrack
    
    local sliderFill = Instance.new("Frame")
    sliderFill.Name = "SliderFill"
    sliderFill.Size = UDim2.new(0.5, 0, 1, 0)
    sliderFill.Position = UDim2.new(0, 0, 0, 0)
    sliderFill.BackgroundColor3 = colors.accent
    sliderFill.BorderSizePixel = 0
    sliderFill.Parent = sliderTrack
    
    -- Hacer el relleno redondeado
    local fillCorner = Instance.new("UICorner")
    fillCorner.CornerRadius = UDim.new(1, 0)
    fillCorner.Parent = sliderFill
    
    local sliderButton = Instance.new("TextButton")
    sliderButton.Name = "SliderButton"
    sliderButton.Size = UDim2.new(0, 18, 0, 18)
    sliderButton.Position = UDim2.new(0.5, -9, 0.5, -9)
    sliderButton.BackgroundColor3 = colors.text
    sliderButton.BorderSizePixel = 0
    sliderButton.Text = ""
    sliderButton.Parent = sliderTrack
    
    -- Hacer el botón circular
    local buttonCorner = Instance.new("UICorner")
    buttonCorner.CornerRadius = UDim.new(1, 0)
    buttonCorner.Parent = sliderButton
    
    local value = default
    local isSliding = false
    
    local function updateSlider(newValue)
        value = math.clamp(newValue, min, max)
        local percentage = (value - min) / (max - min)
        
        TweenService:Create(sliderFill, TweenInfo.new(0.1), {Size = UDim2.new(percentage, 0, 1, 0)}):Play()
        TweenService:Create(sliderButton, TweenInfo.new(0.1), {Position = UDim2.new(percentage, -9, 0.5, -9)}):Play()
        
        valueText.Text = tostring(math.floor(value))
        
        if callback then
            callback(value)
        end
    end
    
    sliderButton.MouseButton1Down:Connect(function()
        isSliding = true
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            isSliding = false
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if isSliding and input.UserInputType == Enum.UserInputType.MouseMovement then
            local mousePos = UserInputService:GetMouseLocation()
            local trackPos = sliderTrack.AbsolutePosition
            local trackSize = sliderTrack.AbsoluteSize
            local relativeX = math.clamp((mousePos.X - trackPos.X) / trackSize.X, 0, 1)
            local newValue = min + (max - min) * relativeX
            updateSlider(newValue)
        end
    end)
    
    sliderTrack.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            local mousePos = UserInputService:GetMouseLocation()
            local trackPos = sliderTrack.AbsolutePosition
            local trackSize = sliderTrack.AbsoluteSize
            local relativeX = math.clamp((mousePos.X - trackPos.X) / trackSize.X, 0, 1)
            local newValue = min + (max - min) * relativeX
            updateSlider(newValue)
        end
    end)
    
    updateSlider(default)
    
    return {
        Set = function(newValue)
            updateSlider(newValue)
        end,
        Get = function()
            return value
        end
    }
end

-- Función para crear botones de tecla
function createKeybindButton(name, description, parent, currentKey, callback)
    local keybindFrame = Instance.new("Frame")
    keybindFrame.Name = name .. "Keybind"
    keybindFrame.Size = UDim2.new(1, 0, 0, 80)
    keybindFrame.BackgroundColor3 = colors.card
    keybindFrame.BorderSizePixel = 0
    keybindFrame.LayoutOrder = #parent:GetChildren()
    keybindFrame.Parent = parent
    
    -- Bordes redondeados
    local frameCorner = Instance.new("UICorner")
    frameCorner.CornerRadius = UDim.new(0, 12)
    frameCorner.Parent = keybindFrame
    
    local keybindText = Instance.new("TextLabel")
    keybindText.Name = "Text"
    keybindText.Size = UDim2.new(0.7, -10, 0, 35)
    keybindText.Position = UDim2.new(0, 15, 0, 10)
    keybindText.BackgroundTransparency = 1
    keybindText.Text = name
    keybindText.TextColor3 = colors.text
    keybindText.TextXAlignment = Enum.TextXAlignment.Left
    keybindText.Font = Enum.Font.GothamBold
    keybindText.TextSize = 18
    keybindText.Parent = keybindFrame
    
    local keybindDesc = Instance.new("TextLabel")
    keybindDesc.Name = "Description"
    keybindDesc.Size = UDim2.new(0.7, -10, 0, 30)
    keybindDesc.Position = UDim2.new(0, 15, 0, 45)
    keybindDesc.BackgroundTransparency = 1
    keybindDesc.Text = description
    keybindDesc.TextColor3 = Color3.fromRGB(180, 180, 180)
    keybindDesc.TextXAlignment = Enum.TextXAlignment.Left
    keybindDesc.Font = Enum.Font.Gotham
    keybindDesc.TextSize = 14
    keybindDesc.Parent = keybindFrame
    
    local keyButton = Instance.new("TextButton")
    keyButton.Name = "KeyButton"
    keyButton.Size = UDim2.new(0, 100, 0, 40)
    keyButton.Position = UDim2.new(1, -110, 0.5, -20)
    keyButton.BackgroundColor3 = colors.accept
    keyButton.BorderSizePixel = 0
    keyButton.Text = tostring(currentKey):gsub("Enum.KeyCode.", "")
    keyButton.TextColor3 = colors.text
    keyButton.Font = Enum.Font.GothamBold
    keyButton.TextSize = 16
    keyButton.Parent = keybindFrame
    
    -- Hacer el botón redondo
    local buttonCorner = Instance.new("UICorner")
    buttonCorner.CornerRadius = UDim.new(0, 8)
    buttonCorner.Parent = keyButton
    
    keyButton.MouseButton1Click:Connect(function()
        keyButton.Text = "..."
        local connection
        connection = UserInputService.InputBegan:Connect(function(input, gameProcessed)
            if not gameProcessed and input.UserInputType == Enum.UserInputType.Keyboard then
                keyButton.Text = tostring(input.KeyCode):gsub("Enum.KeyCode.", "")
                callback(input.KeyCode)
                connection:Disconnect()
            end
        end)
    end)
    
    return {
        Update = function(newKey)
            keyButton.Text = tostring(newKey):gsub("Enum.KeyCode.", "")
        end
    }
end

-- Función para crear botones normales
function createButton(name, description, parent, callback)
    local buttonFrame = Instance.new("Frame")
    buttonFrame.Name = name .. "ButtonFrame"
    buttonFrame.Size = UDim2.new(1, 0, 0, 80)
    buttonFrame.BackgroundColor3 = colors.card
    buttonFrame.BorderSizePixel = 0
    buttonFrame.LayoutOrder = #parent:GetChildren()
    buttonFrame.Parent = parent
    
    -- Bordes redondeados
    local frameCorner = Instance.new("UICorner")
    frameCorner.CornerRadius = UDim.new(0, 12)
    frameCorner.Parent = buttonFrame
    
    local buttonText = Instance.new("TextLabel")
    buttonText.Name = "Text"
    buttonText.Size = UDim2.new(0.7, -10, 0, 35)
    buttonText.Position = UDim2.new(0, 15, 0, 10)
    buttonText.BackgroundTransparency = 1
    buttonText.Text = name
    buttonText.TextColor3 = colors.text
    buttonText.TextXAlignment = Enum.TextXAlignment.Left
    buttonText.Font = Enum.Font.GothamBold
    buttonText.TextSize = 18
    buttonText.Parent = buttonFrame
    
    local buttonDesc = Instance.new("TextLabel")
    buttonDesc.Name = "Description"
    buttonDesc.Size = UDim2.new(0.7, -10, 0, 30)
    buttonDesc.Position = UDim2.new(0, 15, 0, 45)
    buttonDesc.BackgroundTransparency = 1
    buttonDesc.Text = description
    buttonDesc.TextColor3 = Color3.fromRGB(180, 180, 180)
    buttonDesc.TextXAlignment = Enum.TextXAlignment.Left
    buttonDesc.Font = Enum.Font.Gotham
    buttonDesc.TextSize = 14
    buttonDesc.Parent = buttonFrame
    
    local actionButton = Instance.new("TextButton")
    actionButton.Name = "ActionButton"
    actionButton.Size = UDim2.new(0, 100, 0, 40)
    actionButton.Position = UDim2.new(1, -110, 0.5, -20)
    actionButton.BackgroundColor3 = colors.accept
    actionButton.BorderSizePixel = 0
    actionButton.Text = "Activar"
    actionButton.TextColor3 = colors.text
    actionButton.Font = Enum.Font.GothamBold
    actionButton.TextSize = 16
    actionButton.Parent = buttonFrame
    
    -- Hacer el botón redondo
    local buttonCorner = Instance.new("UICorner")
    buttonCorner.CornerRadius = UDim.new(0, 8)
    buttonCorner.Parent = actionButton
    
    actionButton.MouseButton1Click:Connect(function()
        callback()
    end)
    
    return actionButton
end

-- Función para crear opciones de ESP
function createESPOption(name, description, parent, default, callback)
    local optionFrame = Instance.new("Frame")
    optionFrame.Name = name .. "Option"
    optionFrame.Size = UDim2.new(1, 0, 0, 60)
    optionFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 35)
    optionFrame.BorderSizePixel = 0
    optionFrame.LayoutOrder = #parent:GetChildren()
    optionFrame.Parent = parent
    
    -- Bordes redondeados
    local frameCorner = Instance.new("UICorner")
    frameCorner.CornerRadius = UDim.new(0, 8)
    frameCorner.Parent = optionFrame
    
    local optionText = Instance.new("TextLabel")
    optionText.Name = "Text"
    optionText.Size = UDim2.new(0.7, -10, 1, 0)
    optionText.Position = UDim2.new(0, 15, 0, 0)
    optionText.BackgroundTransparency = 1
    optionText.Text = name
    optionText.TextColor3 = colors.text
    optionText.TextXAlignment = Enum.TextXAlignment.Left
    optionText.Font = Enum.Font.Gotham
    optionText.TextSize = 16
    optionText.Parent = optionFrame
    
    local optionDesc = Instance.new("TextLabel")
    optionDesc.Name = "Description"
    optionDesc.Size = UDim2.new(0.7, -10, 0, 0)
    optionDesc.Position = UDim2.new(0, 15, 0, 30)
    optionDesc.BackgroundTransparency = 1
    optionDesc.Text = description
    optionDesc.TextColor3 = Color3.fromRGB(180, 180, 180)
    optionDesc.TextXAlignment = Enum.TextXAlignment.Left
    optionDesc.Font = Enum.Font.Gotham
    optionDesc.TextSize = 12
    optionDesc.Parent = optionFrame
    
    local optionToggle = Instance.new("TextButton")
    optionToggle.Name = "OptionToggle"
    optionToggle.Size = UDim2.new(0, 40, 0, 20)
    optionToggle.Position = UDim2.new(1, -50, 0.5, -10)
    optionToggle.BackgroundColor3 = default and colors.toggleOn or colors.toggleOff
    optionToggle.BorderSizePixel = 0
    optionToggle.Text = ""
    optionToggle.Parent = optionFrame
    
    -- Hacer el toggle redondo
    local toggleCorner = Instance.new("UICorner")
    toggleCorner.CornerRadius = UDim.new(1, 0)
    toggleCorner.Parent = optionToggle
    
    local status = default
    
    optionToggle.MouseButton1Click:Connect(function()
        status = not status
        if status then
            TweenService:Create(optionToggle, TweenInfo.new(0.2), {BackgroundColor3 = colors.toggleOn}):Play()
        else
            TweenService:Create(optionToggle, TweenInfo.new(0.2), {BackgroundColor3 = colors.toggleOff}):Play()
        end
        if callback then
            callback(status)
        end
    end)
    
    return {
        Set = function(value)
            status = value
            if status then
                optionToggle.BackgroundColor3 = colors.toggleOn
            else
                optionToggle.BackgroundColor3 = colors.toggleOff
            end
        end,
        Get = function()
            return status
        end
    }
end

-- Añadir funciones a las secciones

-- Main: WalkSpeed
local walkSpeedSlider = createSlider("WalkSpeed", "Controla la velocidad de movimiento (16-100)", sectionFrames["Main"], 16, 100, 25, function(value)
    RBXWix.WalkSpeedValue = value
    if RBXWix.WalkSpeedEnabled then
        applyWalkSpeed()
    end
end)

local walkSpeedToggle = createToggle("WalkSpeed", "Activa/desactiva la velocidad de movimiento mejorada", sectionFrames["Main"], function(state)
    RBXWix.WalkSpeedEnabled = state
    applyWalkSpeed()
end)

-- Función para aplicar walkspeed (se ejecuta cada segundo)
function applyWalkSpeed()
    local character = player.Character
    if character then
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            if RBXWix.WalkSpeedEnabled then
                humanoid.WalkSpeed = RBXWix.WalkSpeedValue
            else
                humanoid.WalkSpeed = 16
            end
        end
    end
end

-- Main: Jump Power (reemplaza Auto Jump)
local jumpPowerSlider = createSlider("Jump Power", "Controla la fuerza de salto (50-200)", sectionFrames["Main"], 50, 200, 50, function(value)
    RBXWix.JumpPowerValue = value
    if RBXWix.JumpPowerEnabled then
        applyJumpPower()
    end
end)

local jumpPowerToggle = createToggle("Jump Power", "Activa/desactiva la fuerza de salto mejorada", sectionFrames["Main"], function(state)
    RBXWix.JumpPowerEnabled = state
    applyJumpPower()
end)

-- Función para aplicar jump power
function applyJumpPower()
    local character = player.Character
    if character then
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            if RBX
